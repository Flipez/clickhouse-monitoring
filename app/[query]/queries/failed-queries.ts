import { ColumnFormat } from '@/types/column-format'
import { type QueryConfig } from '@/types/query-config'

export const failedQueriesConfig: QueryConfig = {
  name: 'failed-queries',
  sql: `
      SELECT
          type,
          query_start_time,
          query_duration_ms,
          query_id,
          query_kind,
          is_initial_query,
          normalizeQuery(query) AS normalized_query,
          concat(toString(read_rows), ' rows / ', formatReadableSize(read_bytes)) AS read,
          concat(toString(written_rows), ' rows / ', formatReadableSize(written_bytes)) AS written,
          concat(toString(result_rows), ' rows / ', formatReadableSize(result_bytes)) AS result,
          formatReadableSize(memory_usage) AS memory_usage,
          exception,
          concat('\n', stack_trace) AS stack_trace,
          user,
          initial_user,
          multiIf(empty(client_name), http_user_agent, concat(client_name, ' ', toString(client_version_major), '.', toString(client_version_minor), '.', toString(client_version_patch))) AS client,
          client_hostname,
          databases,
          tables,
          columns,
          used_aggregate_functions,
          used_aggregate_function_combinators,
          used_database_engines,
          used_data_type_families,
          used_dictionaries,
          used_formats,
          used_functions,
          used_storages,
          used_table_functions,
          thread_ids,
          ProfileEvents,
          Settings
      FROM system.query_log
      WHERE type IN ['ExceptionBeforeStart', 'ExceptionWhileProcessing']
      ORDER BY query_start_time DESC
      LIMIT 100
    `,
  columns: [
    'type',
    'query_start_time',
    'query_duration_ms',
    'query_id',
    'query_kind',
    'is_initial_query',
    'normalized_query',
    'read',
    'written',
    'result',
    'memory usage',
    'exception',
    'stack_trace',
    'user',
    'initial_user',
    'client',
    'client_hostname',
    'databases',
    'tables',
    'columns',
    'used_aggregate_functions',
    'used_aggregate_function_combinators',
    'used_database_engines',
    'used_data_type_families',
    'used_dictionaries',
    'used_formats',
    'used_functions',
    'used_storages',
    'used_table_functions',
    'thread_ids',
  ],
  columnFormats: {
    type: ColumnFormat.ColoredBadge,
    query_duration_ms: ColumnFormat.Duration,
    query_start_time: ColumnFormat.RelatedTime,
    normalized_query: ColumnFormat.Code,
    exception: ColumnFormat.CodeToggle,
    stack_trace: ColumnFormat.CodeToggle,
    client: ColumnFormat.Code,
  },
}

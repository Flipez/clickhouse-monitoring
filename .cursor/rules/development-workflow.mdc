---
description: 
globs: 
alwaysApply: true
---
# Development Workflow & Best Practices

This document outlines the development workflow, testing strategies, and coding standards for the ClickHouse monitoring project.

## Development Setup

### Prerequisites
- **Node.js**: Compatible with React 19 and Next.js 15
- **Package Manager**: pnpm (enforced via preinstall script)
- **ClickHouse**: Running instance for testing

### Environment Variables
Required environment variables for development:
```env
CLICKHOUSE_HOST=localhost:8123
CLICKHOUSE_USER=default
CLICKHOUSE_PASSWORD=
CLICKHOUSE_NAME=Local
CLICKHOUSE_MAX_EXECUTION_TIME=60
```

### Scripts Overview
From [package.json](mdc:package.json):
- `pnpm dev` - Development server with turbopack
- `pnpm build` - Production build with turbopack
- `pnpm lint` - ESLint checking
- `pnpm fmt` - Prettier formatting with cache
- `pnpm test` - Run Jest tests
- `pnpm e2e` - Cypress E2E tests

## Code Quality & Standards

### TypeScript Configuration
[tsconfig.json](mdc:tsconfig.json) enforces:
- Strict mode enabled
- Path aliases (`@/*` for workspace root)
- Module resolution: bundler
- JSX: preserve (for Next.js)

### Linting & Formatting
- **ESLint**: [eslint.config.mjs](mdc:eslint.config.mjs) with Next.js rules
- **Prettier**: [prettier.config.cjs](mdc:prettier.config.cjs) with import sorting
- **Formatting**: Automated via `pnpm fmt` command

### Import Organization
[prettier.config.cjs](mdc:prettier.config.cjs) uses plugins for:
- Import sorting (@ianvs/prettier-plugin-sort-imports)
- Import organization (prettier-plugin-organize-imports)
- Tailwind class sorting (prettier-plugin-tailwindcss)

## Testing Strategy

### Unit Testing (Jest)
- Configuration: [jest.config.js](mdc:jest.config.js)
- Pattern: `*.test.ts` files
- Coverage reporting enabled
- Test utilities in [lib/](mdc:lib) directory

### E2E Testing (Cypress)
- Configuration: [cypress.config.ts](mdc:cypress.config.ts)
- Tests: [cypress/e2e/](mdc:cypress/e2e)
- Component testing supported
- Real event simulation via cypress-real-events

### Component Testing
- Pattern: `*.cy.tsx` files alongside components
- Examples: [components/error-alert.cy.tsx](mdc:components/error-alert.cy.tsx)
- Component isolation testing

## Development Patterns

### Server Component First
Default to React Server Components unless interactivity is needed:
```typescript
// Server Component (default)
export default async function Page() {
  const data = await fetchData({ query: '...' })
  return <Table data={data} />
}

// Client Component (when needed)
'use client'
export function InteractiveComponent() {
  const [state, setState] = useState()
  return <button onClick={() => setState(!state)} />
}
```

### Error Handling
Consistent error handling with [components/error-alert.tsx](mdc:components/error-alert.tsx):
```typescript
try {
  const data = await fetchData({ query })
  return <DataTable data={data} />
} catch (error) {
  return <ErrorAlert 
    title="Query Error" 
    message={error.message}
    query={query}
  />
}
```

### Loading States
Use Suspense with proper loading components:
```typescript
<Suspense fallback={<TableSkeleton />}>
  <AsyncComponent />
</Suspense>
```

## File Organization

### Feature-Based Structure
- Group related components in feature directories
- Keep tests alongside source files
- Use index files for clean imports

### Naming Conventions
- **Components**: PascalCase (`DataTable.tsx`)
- **Utilities**: camelCase (`clickhouse.ts`)
- **Types**: kebab-case (`query-config.ts`)
- **Pages**: Next.js conventions (`page.tsx`, `layout.tsx`)

### Import Aliases
Use `@/` prefix for all internal imports:
```typescript
import { fetchData } from '@/lib/clickhouse'
import { DataTable } from '@/components/data-table/data-table'
```

## Performance Considerations

### Bundle Optimization
- [next.config.ts](mdc:next.config.ts) uses standalone output
- External package bundling enabled
- Turbo build system for faster builds

### Database Performance
- Query timeout management in [lib/clickhouse.ts](mdc:lib/clickhouse.ts)
- Pagination for large datasets
- Proper query parameterization

### Client-Side Performance
- Minimal client-side JavaScript
- Progressive enhancement approach
- Optimized image loading

## Documentation

### Code Documentation
- JSDoc comments for complex functions
- Type definitions serve as documentation
- README.md for setup and deployment

### Component Documentation
- Storybook-style component isolation
- Cypress component tests as examples
- Type-safe prop interfaces

## Deployment

### Build Process
- `pnpm build` creates optimized production build
- Docker support via [Dockerfile](mdc:Dockerfile)
- Vercel deployment configuration in [vercel.json](mdc:vercel.json)

### Environment Management
- Development: Local ClickHouse instance
- Staging/Production: Environment-specific configurations
- Multi-host support for different environments

# Component System & UI Architecture

This project uses a sophisticated component system built on Radix UI primitives with shadcn/ui and Tremor for data visualization.

## UI Foundation

### Design System
- **Base**: [components/ui/](mdc:components/ui/) - shadcn/ui components
- **Styling**: Tailwind CSS with custom design tokens in [tailwind.config.js](mdc:tailwind.config.js)  
- **Icons**: Radix UI icons + Lucide React icons
- **Theming**: Dark/light mode support via next-themes

### Core UI Components
- [components/ui/button.tsx](mdc:components/ui/button.tsx) - Button variants with CVA
- [components/ui/table.tsx](mdc:components/ui/table.tsx) - Base table styling
- [components/ui/dialog.tsx](mdc:components/ui/dialog.tsx) - Modal dialogs
- [components/ui/card.tsx](mdc:components/ui/card.tsx) - Card container component
- [components/ui/badge.tsx](mdc:components/ui/badge.tsx) - Status badges with variants
- [components/ui/separator.tsx](mdc:components/ui/separator.tsx) - Visual section separators

## Data Display Components

### Table System
- **[components/table.tsx](mdc:components/table.tsx)** - Main data table wrapper
- **[components/data-table/](mdc:components/data-table/)** - Advanced table features:
  - [data-table.tsx](mdc:components/data-table/data-table.tsx) - Core table component
  - [cells/](mdc:components/data-table/cells/) - Custom cell renderers
  - [buttons/](mdc:components/data-table/buttons/) - Table action buttons

### Chart Components
- **[components/tremor/](mdc:components/tremor/)** - Tremor chart wrappers:
  - [area.tsx](mdc:components/tremor/area.tsx) - Area charts
  - [bar.tsx](mdc:components/tremor/bar.tsx) - Bar charts
- **[components/charts/](mdc:components/charts/)** - Custom chart implementations
- **[components/generic-charts/](mdc:components/generic-charts/)** - Reusable chart patterns
- **[components/github-heatmap-chart.tsx](mdc:components/github-heatmap-chart.tsx)** - GitHub-style heatmaps

### Overview Charts
[components/overview-charts/](mdc:components/overview-charts/) - Dashboard-specific visualizations for cluster metrics

## Application Components

### Navigation & Layout
- **[components/header.tsx](mdc:components/header.tsx)** - Main application header
- **[components/menu/](mdc:components/menu/)** - Navigation menu system
- **[components/clickhouse-host-selector.tsx](mdc:components/clickhouse-host-selector.tsx)** - Multi-host switcher

### Utility Components  
- **[components/error-alert.tsx](mdc:components/error-alert.tsx)** - Error display with SQL query
- **[components/skeleton.tsx](mdc:components/skeleton.tsx)** - Loading skeletons
- **[components/loading-icon.tsx](mdc:components/loading-icon.tsx)** - Loading indicators
- **[components/truncated-list.tsx](mdc:components/truncated-list.tsx)** - List truncation
- **[components/truncated-paragraph.tsx](mdc:components/truncated-paragraph.tsx)** - Text truncation

### Interactive Components
- **[components/dialog-sql.tsx](mdc:components/dialog-sql.tsx)** - SQL query dialogs
- **[components/interval-select.tsx](mdc:components/interval-select.tsx)** - Time interval picker
- **[components/reload-button.tsx](mdc:components/reload-button.tsx)** - Manual refresh controls

## Component Patterns

### Server Components
Most components are React Server Components for optimal performance:
- Direct database access in components
- Server-side data fetching and rendering
- Minimal client-side JavaScript

### Client Components
Marked with `'use client'` for interactivity:
- Form components
- Interactive charts
- State management components

### Async Component Pattern
```typescript
export async function MyComponent({ params }: Props) {
  const data = await fetchData({ query: '...' })
  return <DataTable data={data} />
}
```

### Error Boundary Pattern
Components use try/catch with [components/error-alert.tsx](mdc:components/error-alert.tsx) for graceful error handling.

### Suspense Pattern
Pages use React Suspense with loading skeletons:
```typescript
<Suspense fallback={<TableSkeleton />}>
  <Table queryConfig={config} />
</Suspense>
```

### Dashboard Layout Pattern
Modern dashboard pages follow this structure pattern (see [app/[host]/overview/page.tsx](mdc:app/[host]/overview/page.tsx)):
- **Header Section**: Page title and description
- **Key Metrics**: Overview cards with primary KPIs
- **Organized Sections**: Grouped content with separators
- **Responsive Grids**: Cards that adapt to screen size
- **Consistent Card Structure**: CardHeader with title/description + CardContent

```typescript
<section className="space-y-6">
  <div>
    <h2 className="text-2xl font-semibold tracking-tight">Performance</h2>
    <p className="text-sm text-muted-foreground">Description</p>
  </div>
  <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
    <Card className="border-0 shadow-sm">
      <CardHeader className="pb-3">
        <CardTitle className="text-lg">Chart Title</CardTitle>
        <CardDescription>Chart description</CardDescription>
      </CardHeader>
      <CardContent>
        <ChartComponent />
      </CardContent>
    </Card>
  </div>
</section>
```

## Custom Hooks

### Data Hooks
Located in [components/hooks/](mdc:components/hooks/):
- Custom hooks for ClickHouse data fetching
- State management for complex interactions
- Reusable data transformation logic

## Type System

### Component Types
- [types/column-format.ts](mdc:types/column-format.ts) - Table column definitions
- [types/charts.ts](mdc:types/charts.ts) - Chart configuration types
- [types/badge-variant.ts](mdc:types/badge-variant.ts) - Badge styling variants
- [types/icon.ts](mdc:types/icon.ts) - Icon component types

### Form Integration
Components integrate with react-hook-form + zod for type-safe forms with validation.
